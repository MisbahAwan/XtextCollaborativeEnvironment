/*
 * generated by Xtext 2.25.0
 */
package webdsl.epackage.pkgdsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import webdsl.epackage.pkgdsl.pkgDsl.AC_TimingExpression;
import webdsl.epackage.pkgdsl.pkgDsl.Age_Constraint;
import webdsl.epackage.pkgdsl.pkgDsl.Constraints;
import webdsl.epackage.pkgdsl.pkgDsl.DC_TimingExpression;
import webdsl.epackage.pkgdsl.pkgDsl.Delay_Constraint;
import webdsl.epackage.pkgdsl.pkgDsl.Descriptions;
import webdsl.epackage.pkgdsl.pkgDsl.EA_Numerical;
import webdsl.epackage.pkgdsl.pkgDsl.EA_Package;
import webdsl.epackage.pkgdsl.pkgDsl.ETC_TimingExpression;
import webdsl.epackage.pkgdsl.pkgDsl.Element;
import webdsl.epackage.pkgdsl.pkgDsl.Elements;
import webdsl.epackage.pkgdsl.pkgDsl.Event_Chain;
import webdsl.epackage.pkgdsl.pkgDsl.Event_Function;
import webdsl.epackage.pkgdsl.pkgDsl.Event_Function_Flow_Port;
import webdsl.epackage.pkgdsl.pkgDsl.Execution_Time_Constraint;
import webdsl.epackage.pkgdsl.pkgDsl.File;
import webdsl.epackage.pkgdsl.pkgDsl.Nested_Package;
import webdsl.epackage.pkgdsl.pkgDsl.Order_Constraint;
import webdsl.epackage.pkgdsl.pkgDsl.PC_TimingExpression;
import webdsl.epackage.pkgdsl.pkgDsl.Pattern_Constraint;
import webdsl.epackage.pkgdsl.pkgDsl.Pattern_Constraint_TimingExpression;
import webdsl.epackage.pkgdsl.pkgDsl.Periodic_Constraint;
import webdsl.epackage.pkgdsl.pkgDsl.PkgDslPackage;
import webdsl.epackage.pkgdsl.pkgDsl.Quantity;
import webdsl.epackage.pkgdsl.pkgDsl.RC_TimingExpression;
import webdsl.epackage.pkgdsl.pkgDsl.Reaction_Constraint;
import webdsl.epackage.pkgdsl.pkgDsl.Sub_Package;
import webdsl.epackage.pkgdsl.pkgDsl.Timing;
import webdsl.epackage.pkgdsl.pkgDsl.Unit;
import webdsl.epackage.pkgdsl.pkgDsl.test1;
import webdsl.epackage.pkgdsl.services.PkgDslGrammarAccess;

@SuppressWarnings("all")
public class PkgDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private PkgDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == PkgDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case PkgDslPackage.AC_TIMING_EXPRESSION:
				sequence_AC_TimingExpression(context, (AC_TimingExpression) semanticObject); 
				return; 
			case PkgDslPackage.AGE_CONSTRAINT:
				sequence_Age_Constraint(context, (Age_Constraint) semanticObject); 
				return; 
			case PkgDslPackage.CONSTRAINTS:
				sequence_Constraints(context, (Constraints) semanticObject); 
				return; 
			case PkgDslPackage.DC_TIMING_EXPRESSION:
				sequence_DC_TimingExpression(context, (DC_TimingExpression) semanticObject); 
				return; 
			case PkgDslPackage.DELAY_CONSTRAINT:
				sequence_Delay_Constraint(context, (Delay_Constraint) semanticObject); 
				return; 
			case PkgDslPackage.DESCRIPTIONS:
				sequence_Descriptions(context, (Descriptions) semanticObject); 
				return; 
			case PkgDslPackage.EA_NUMERICAL:
				sequence_EA_Numerical(context, (EA_Numerical) semanticObject); 
				return; 
			case PkgDslPackage.EA_PACKAGE:
				sequence_EA_Package(context, (EA_Package) semanticObject); 
				return; 
			case PkgDslPackage.ETC_TIMING_EXPRESSION:
				sequence_ETC_TimingExpression(context, (ETC_TimingExpression) semanticObject); 
				return; 
			case PkgDslPackage.ELEMENT:
				sequence_Element(context, (Element) semanticObject); 
				return; 
			case PkgDslPackage.ELEMENTS:
				sequence_Elements(context, (Elements) semanticObject); 
				return; 
			case PkgDslPackage.EVENT_CHAIN:
				sequence_Event_Chain(context, (Event_Chain) semanticObject); 
				return; 
			case PkgDslPackage.EVENT_FUNCTION:
				sequence_Event_Function(context, (Event_Function) semanticObject); 
				return; 
			case PkgDslPackage.EVENT_FUNCTION_FLOW_PORT:
				sequence_Event_Function_Flow_Port(context, (Event_Function_Flow_Port) semanticObject); 
				return; 
			case PkgDslPackage.EXECUTION_TIME_CONSTRAINT:
				sequence_Execution_Time_Constraint(context, (Execution_Time_Constraint) semanticObject); 
				return; 
			case PkgDslPackage.FILE:
				sequence_File(context, (File) semanticObject); 
				return; 
			case PkgDslPackage.NESTED_PACKAGE:
				sequence_Nested_Package(context, (Nested_Package) semanticObject); 
				return; 
			case PkgDslPackage.ORDER_CONSTRAINT:
				sequence_Order_Constraint(context, (Order_Constraint) semanticObject); 
				return; 
			case PkgDslPackage.PC_TIMING_EXPRESSION:
				sequence_PC_TimingExpression(context, (PC_TimingExpression) semanticObject); 
				return; 
			case PkgDslPackage.PATTERN_CONSTRAINT:
				sequence_Pattern_Constraint(context, (Pattern_Constraint) semanticObject); 
				return; 
			case PkgDslPackage.PATTERN_CONSTRAINT_TIMING_EXPRESSION:
				sequence_Pattern_Constraint_TimingExpression(context, (Pattern_Constraint_TimingExpression) semanticObject); 
				return; 
			case PkgDslPackage.PERIODIC_CONSTRAINT:
				sequence_Periodic_Constraint(context, (Periodic_Constraint) semanticObject); 
				return; 
			case PkgDslPackage.QUANTITY:
				sequence_Quantity(context, (Quantity) semanticObject); 
				return; 
			case PkgDslPackage.RC_TIMING_EXPRESSION:
				sequence_RC_TimingExpression(context, (RC_TimingExpression) semanticObject); 
				return; 
			case PkgDslPackage.REACTION_CONSTRAINT:
				sequence_Reaction_Constraint(context, (Reaction_Constraint) semanticObject); 
				return; 
			case PkgDslPackage.SUB_PACKAGE:
				sequence_Sub_Package(context, (Sub_Package) semanticObject); 
				return; 
			case PkgDslPackage.TIMING:
				sequence_Timing(context, (Timing) semanticObject); 
				return; 
			case PkgDslPackage.UNIT:
				sequence_Unit(context, (Unit) semanticObject); 
				return; 
			case PkgDslPackage.TEST1:
				sequence_test1(context, (test1) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AC_TimingExpression returns AC_TimingExpression
	 *
	 * Constraint:
	 *     (define=ID name=STRING type=STRING value=STRING)
	 */
	protected void sequence_AC_TimingExpression(ISerializationContext context, AC_TimingExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PkgDslPackage.Literals.AC_TIMING_EXPRESSION__DEFINE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PkgDslPackage.Literals.AC_TIMING_EXPRESSION__DEFINE));
			if (transientValues.isValueTransient(semanticObject, PkgDslPackage.Literals.AC_TIMING_EXPRESSION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PkgDslPackage.Literals.AC_TIMING_EXPRESSION__NAME));
			if (transientValues.isValueTransient(semanticObject, PkgDslPackage.Literals.AC_TIMING_EXPRESSION__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PkgDslPackage.Literals.AC_TIMING_EXPRESSION__TYPE));
			if (transientValues.isValueTransient(semanticObject, PkgDslPackage.Literals.AC_TIMING_EXPRESSION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PkgDslPackage.Literals.AC_TIMING_EXPRESSION__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAC_TimingExpressionAccess().getDefineIDTerminalRuleCall_0_0(), semanticObject.getDefine());
		feeder.accept(grammarAccess.getAC_TimingExpressionAccess().getNameSTRINGTerminalRuleCall_3_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getAC_TimingExpressionAccess().getTypeSTRINGTerminalRuleCall_5_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getAC_TimingExpressionAccess().getValueSTRINGTerminalRuleCall_7_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Age_Constraint returns Age_Constraint
	 *
	 * Constraint:
	 *     (define=ID test=test1)
	 */
	protected void sequence_Age_Constraint(ISerializationContext context, Age_Constraint semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PkgDslPackage.Literals.AGE_CONSTRAINT__DEFINE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PkgDslPackage.Literals.AGE_CONSTRAINT__DEFINE));
			if (transientValues.isValueTransient(semanticObject, PkgDslPackage.Literals.AGE_CONSTRAINT__TEST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PkgDslPackage.Literals.AGE_CONSTRAINT__TEST));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAge_ConstraintAccess().getDefineIDTerminalRuleCall_0_0(), semanticObject.getDefine());
		feeder.accept(grammarAccess.getAge_ConstraintAccess().getTestTest1ParserRuleCall_2_0(), semanticObject.getTest());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Constraints returns Constraints
	 *
	 * Constraint:
	 *     (
	 *         define=ID 
	 *         periodic_constraint+=Periodic_Constraint* 
	 *         delay_constraint+=Delay_Constraint* 
	 *         age_constraint+=Age_Constraint* 
	 *         execution_time_constraint+=Execution_Time_Constraint* 
	 *         order_constraint+=Order_Constraint* 
	 *         pattern_constraint+=Pattern_Constraint* 
	 *         reaction_constraint+=Reaction_Constraint*
	 *     )
	 */
	protected void sequence_Constraints(ISerializationContext context, Constraints semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DC_TimingExpression returns DC_TimingExpression
	 *
	 * Constraint:
	 *     (define=ID name=STRING type=STRING value=STRING)
	 */
	protected void sequence_DC_TimingExpression(ISerializationContext context, DC_TimingExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PkgDslPackage.Literals.DC_TIMING_EXPRESSION__DEFINE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PkgDslPackage.Literals.DC_TIMING_EXPRESSION__DEFINE));
			if (transientValues.isValueTransient(semanticObject, PkgDslPackage.Literals.DC_TIMING_EXPRESSION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PkgDslPackage.Literals.DC_TIMING_EXPRESSION__NAME));
			if (transientValues.isValueTransient(semanticObject, PkgDslPackage.Literals.DC_TIMING_EXPRESSION__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PkgDslPackage.Literals.DC_TIMING_EXPRESSION__TYPE));
			if (transientValues.isValueTransient(semanticObject, PkgDslPackage.Literals.DC_TIMING_EXPRESSION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PkgDslPackage.Literals.DC_TIMING_EXPRESSION__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDC_TimingExpressionAccess().getDefineIDTerminalRuleCall_0_0(), semanticObject.getDefine());
		feeder.accept(grammarAccess.getDC_TimingExpressionAccess().getNameSTRINGTerminalRuleCall_3_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getDC_TimingExpressionAccess().getTypeSTRINGTerminalRuleCall_5_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getDC_TimingExpressionAccess().getValueSTRINGTerminalRuleCall_7_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Delay_Constraint returns Delay_Constraint
	 *
	 * Constraint:
	 *     (
	 *         define=ID 
	 *         uuid=STRING 
	 *         shortname=STRING 
	 *         category=STRING 
	 *         name=STRING 
	 *         target=STRING 
	 *         source=STRING 
	 *         timingexpression+=DC_TimingExpression*
	 *     )
	 */
	protected void sequence_Delay_Constraint(ISerializationContext context, Delay_Constraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Descriptions returns Descriptions
	 *
	 * Constraint:
	 *     (define=ID event_function+=Event_Function* event_function_flow_port+=Event_Function_Flow_Port* event_chain+=Event_Chain*)
	 */
	protected void sequence_Descriptions(ISerializationContext context, Descriptions semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EA_Numerical returns EA_Numerical
	 *
	 * Constraint:
	 *     (
	 *         define=ID 
	 *         uuid=STRING 
	 *         shortname=STRING 
	 *         category=STRING 
	 *         name=STRING 
	 *         text=STRING? 
	 *         max=STRING? 
	 *         min=STRING? 
	 *         data_unit=STRING
	 *     )
	 */
	protected void sequence_EA_Numerical(ISerializationContext context, EA_Numerical semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EA_Package returns EA_Package
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             ((define=ID? shortname=STRING) | (define=ID? uuid=STRING shortname=STRING) | shortname=STRING)? 
	 *             category=STRING 
	 *             name=STRING 
	 *             ((subpackages+=Sub_Package+ elements+=Elements+) | elements+=Elements+)?
	 *         ) | 
	 *         (
	 *             (
	 *                 (define=ID? ((shortname=STRING name=STRING) | name=STRING)) | 
	 *                 (define=ID? uuid=STRING ((shortname=STRING name=STRING) | name=STRING)) | 
	 *                 (shortname=STRING name=STRING) | 
	 *                 name=STRING
	 *             ) 
	 *             subpackages+=Sub_Package+ 
	 *             elements+=Elements+
	 *         ) | 
	 *         (define=ID? (name=STRING | (name=STRING elements+=Elements+))) | 
	 *         (define=ID? uuid=STRING (name=STRING | (name=STRING elements+=Elements+))) | 
	 *         (
	 *             ((define=ID? shortname=STRING) | (define=ID? uuid=STRING shortname=STRING) | shortname=STRING) 
	 *             (name=STRING | (name=STRING elements+=Elements+))
	 *         ) | 
	 *         name=STRING | 
	 *         (name=STRING elements+=Elements+)
	 *     )?
	 */
	protected void sequence_EA_Package(ISerializationContext context, EA_Package semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ETC_TimingExpression returns ETC_TimingExpression
	 *
	 * Constraint:
	 *     (define=ID name=STRING type=STRING value=STRING)
	 */
	protected void sequence_ETC_TimingExpression(ISerializationContext context, ETC_TimingExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PkgDslPackage.Literals.ETC_TIMING_EXPRESSION__DEFINE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PkgDslPackage.Literals.ETC_TIMING_EXPRESSION__DEFINE));
			if (transientValues.isValueTransient(semanticObject, PkgDslPackage.Literals.ETC_TIMING_EXPRESSION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PkgDslPackage.Literals.ETC_TIMING_EXPRESSION__NAME));
			if (transientValues.isValueTransient(semanticObject, PkgDslPackage.Literals.ETC_TIMING_EXPRESSION__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PkgDslPackage.Literals.ETC_TIMING_EXPRESSION__TYPE));
			if (transientValues.isValueTransient(semanticObject, PkgDslPackage.Literals.ETC_TIMING_EXPRESSION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PkgDslPackage.Literals.ETC_TIMING_EXPRESSION__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getETC_TimingExpressionAccess().getDefineIDTerminalRuleCall_0_0(), semanticObject.getDefine());
		feeder.accept(grammarAccess.getETC_TimingExpressionAccess().getNameSTRINGTerminalRuleCall_3_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getETC_TimingExpressionAccess().getTypeSTRINGTerminalRuleCall_5_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getETC_TimingExpressionAccess().getValueSTRINGTerminalRuleCall_7_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Element returns Element
	 *
	 * Constraint:
	 *     (define=ID ea_numerical+=EA_Numerical* unit+=Unit* qunatity+=Quantity* timing+=Timing*)
	 */
	protected void sequence_Element(ISerializationContext context, Element semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Elements returns Elements
	 *
	 * Constraint:
	 *     (define=ID ea_numerical+=EA_Numerical* unit+=Unit* qunatity+=Quantity* timing+=Timing*)
	 */
	protected void sequence_Elements(ISerializationContext context, Elements semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Event_Chain returns Event_Chain
	 *
	 * Constraint:
	 *     (
	 *         define=ID 
	 *         uuid=STRING 
	 *         shortname=STRING 
	 *         category=STRING 
	 *         name=STRING 
	 *         segment_ref=STRING? 
	 *         stimulus=STRING 
	 *         response=STRING
	 *     )
	 */
	protected void sequence_Event_Chain(ISerializationContext context, Event_Chain semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Event_Function returns Event_Function
	 *
	 * Constraint:
	 *     (
	 *         define=ID 
	 *         uuid=STRING 
	 *         shortname=STRING 
	 *         category=STRING 
	 *         name=STRING 
	 *         func_type=STRING 
	 *         func_value=STRING 
	 *         func_prototype_target=STRING 
	 *         func_prototype_context=STRING
	 *     )
	 */
	protected void sequence_Event_Function(ISerializationContext context, Event_Function semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PkgDslPackage.Literals.EVENT_FUNCTION__DEFINE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PkgDslPackage.Literals.EVENT_FUNCTION__DEFINE));
			if (transientValues.isValueTransient(semanticObject, PkgDslPackage.Literals.EVENT_FUNCTION__UUID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PkgDslPackage.Literals.EVENT_FUNCTION__UUID));
			if (transientValues.isValueTransient(semanticObject, PkgDslPackage.Literals.EVENT_FUNCTION__SHORTNAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PkgDslPackage.Literals.EVENT_FUNCTION__SHORTNAME));
			if (transientValues.isValueTransient(semanticObject, PkgDslPackage.Literals.EVENT_FUNCTION__CATEGORY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PkgDslPackage.Literals.EVENT_FUNCTION__CATEGORY));
			if (transientValues.isValueTransient(semanticObject, PkgDslPackage.Literals.EVENT_FUNCTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PkgDslPackage.Literals.EVENT_FUNCTION__NAME));
			if (transientValues.isValueTransient(semanticObject, PkgDslPackage.Literals.EVENT_FUNCTION__FUNC_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PkgDslPackage.Literals.EVENT_FUNCTION__FUNC_TYPE));
			if (transientValues.isValueTransient(semanticObject, PkgDslPackage.Literals.EVENT_FUNCTION__FUNC_VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PkgDslPackage.Literals.EVENT_FUNCTION__FUNC_VALUE));
			if (transientValues.isValueTransient(semanticObject, PkgDslPackage.Literals.EVENT_FUNCTION__FUNC_PROTOTYPE_TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PkgDslPackage.Literals.EVENT_FUNCTION__FUNC_PROTOTYPE_TARGET));
			if (transientValues.isValueTransient(semanticObject, PkgDslPackage.Literals.EVENT_FUNCTION__FUNC_PROTOTYPE_CONTEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PkgDslPackage.Literals.EVENT_FUNCTION__FUNC_PROTOTYPE_CONTEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvent_FunctionAccess().getDefineIDTerminalRuleCall_0_0(), semanticObject.getDefine());
		feeder.accept(grammarAccess.getEvent_FunctionAccess().getUuidSTRINGTerminalRuleCall_3_0(), semanticObject.getUuid());
		feeder.accept(grammarAccess.getEvent_FunctionAccess().getShortnameSTRINGTerminalRuleCall_5_0(), semanticObject.getShortname());
		feeder.accept(grammarAccess.getEvent_FunctionAccess().getCategorySTRINGTerminalRuleCall_7_0(), semanticObject.getCategory());
		feeder.accept(grammarAccess.getEvent_FunctionAccess().getNameSTRINGTerminalRuleCall_9_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getEvent_FunctionAccess().getFunc_typeSTRINGTerminalRuleCall_11_0(), semanticObject.getFunc_type());
		feeder.accept(grammarAccess.getEvent_FunctionAccess().getFunc_valueSTRINGTerminalRuleCall_13_0(), semanticObject.getFunc_value());
		feeder.accept(grammarAccess.getEvent_FunctionAccess().getFunc_prototype_targetSTRINGTerminalRuleCall_15_0(), semanticObject.getFunc_prototype_target());
		feeder.accept(grammarAccess.getEvent_FunctionAccess().getFunc_prototype_contextSTRINGTerminalRuleCall_17_0(), semanticObject.getFunc_prototype_context());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Event_Function_Flow_Port returns Event_Function_Flow_Port
	 *
	 * Constraint:
	 *     (
	 *         define=ID 
	 *         uuid=STRING 
	 *         shortname=STRING 
	 *         category=STRING 
	 *         name=STRING 
	 *         func_type=STRING 
	 *         func_value=STRING 
	 *         func_prototype=STRING 
	 *         func_flow_port=STRING
	 *     )
	 */
	protected void sequence_Event_Function_Flow_Port(ISerializationContext context, Event_Function_Flow_Port semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PkgDslPackage.Literals.EVENT_FUNCTION_FLOW_PORT__DEFINE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PkgDslPackage.Literals.EVENT_FUNCTION_FLOW_PORT__DEFINE));
			if (transientValues.isValueTransient(semanticObject, PkgDslPackage.Literals.EVENT_FUNCTION_FLOW_PORT__UUID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PkgDslPackage.Literals.EVENT_FUNCTION_FLOW_PORT__UUID));
			if (transientValues.isValueTransient(semanticObject, PkgDslPackage.Literals.EVENT_FUNCTION_FLOW_PORT__SHORTNAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PkgDslPackage.Literals.EVENT_FUNCTION_FLOW_PORT__SHORTNAME));
			if (transientValues.isValueTransient(semanticObject, PkgDslPackage.Literals.EVENT_FUNCTION_FLOW_PORT__CATEGORY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PkgDslPackage.Literals.EVENT_FUNCTION_FLOW_PORT__CATEGORY));
			if (transientValues.isValueTransient(semanticObject, PkgDslPackage.Literals.EVENT_FUNCTION_FLOW_PORT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PkgDslPackage.Literals.EVENT_FUNCTION_FLOW_PORT__NAME));
			if (transientValues.isValueTransient(semanticObject, PkgDslPackage.Literals.EVENT_FUNCTION_FLOW_PORT__FUNC_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PkgDslPackage.Literals.EVENT_FUNCTION_FLOW_PORT__FUNC_TYPE));
			if (transientValues.isValueTransient(semanticObject, PkgDslPackage.Literals.EVENT_FUNCTION_FLOW_PORT__FUNC_VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PkgDslPackage.Literals.EVENT_FUNCTION_FLOW_PORT__FUNC_VALUE));
			if (transientValues.isValueTransient(semanticObject, PkgDslPackage.Literals.EVENT_FUNCTION_FLOW_PORT__FUNC_PROTOTYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PkgDslPackage.Literals.EVENT_FUNCTION_FLOW_PORT__FUNC_PROTOTYPE));
			if (transientValues.isValueTransient(semanticObject, PkgDslPackage.Literals.EVENT_FUNCTION_FLOW_PORT__FUNC_FLOW_PORT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PkgDslPackage.Literals.EVENT_FUNCTION_FLOW_PORT__FUNC_FLOW_PORT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvent_Function_Flow_PortAccess().getDefineIDTerminalRuleCall_0_0(), semanticObject.getDefine());
		feeder.accept(grammarAccess.getEvent_Function_Flow_PortAccess().getUuidSTRINGTerminalRuleCall_3_0(), semanticObject.getUuid());
		feeder.accept(grammarAccess.getEvent_Function_Flow_PortAccess().getShortnameSTRINGTerminalRuleCall_5_0(), semanticObject.getShortname());
		feeder.accept(grammarAccess.getEvent_Function_Flow_PortAccess().getCategorySTRINGTerminalRuleCall_7_0(), semanticObject.getCategory());
		feeder.accept(grammarAccess.getEvent_Function_Flow_PortAccess().getNameSTRINGTerminalRuleCall_9_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getEvent_Function_Flow_PortAccess().getFunc_typeSTRINGTerminalRuleCall_11_0(), semanticObject.getFunc_type());
		feeder.accept(grammarAccess.getEvent_Function_Flow_PortAccess().getFunc_valueSTRINGTerminalRuleCall_13_0(), semanticObject.getFunc_value());
		feeder.accept(grammarAccess.getEvent_Function_Flow_PortAccess().getFunc_prototypeSTRINGTerminalRuleCall_15_0(), semanticObject.getFunc_prototype());
		feeder.accept(grammarAccess.getEvent_Function_Flow_PortAccess().getFunc_flow_portSTRINGTerminalRuleCall_17_0(), semanticObject.getFunc_flow_port());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Execution_Time_Constraint returns Execution_Time_Constraint
	 *
	 * Constraint:
	 *     (
	 *         define=ID 
	 *         uuid=STRING 
	 *         shortname=STRING 
	 *         category=STRING 
	 *         name=STRING 
	 *         resume_ref=STRING? 
	 *         preemption_refs=STRING? 
	 *         start=STRING 
	 *         stop=STRING 
	 *         timingexpression+=ETC_TimingExpression*
	 *     )
	 */
	protected void sequence_Execution_Time_Constraint(ISerializationContext context, Execution_Time_Constraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     File returns File
	 *
	 * Constraint:
	 *     ((ea_package+=EA_Package+ timing+=Timing+) | timing+=Timing+)?
	 */
	protected void sequence_File(ISerializationContext context, File semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Nested_Package returns Nested_Package
	 *
	 * Constraint:
	 *     (
	 *         define=ID 
	 *         uuid=STRING 
	 *         shortname=STRING 
	 *         category=STRING 
	 *         name=STRING 
	 *         subpackages+=Sub_Package* 
	 *         element+=Element*
	 *     )
	 */
	protected void sequence_Nested_Package(ISerializationContext context, Nested_Package semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Order_Constraint returns Order_Constraint
	 *
	 * Constraint:
	 *     (
	 *         define=ID 
	 *         uuid=STRING 
	 *         shortname=STRING 
	 *         category=STRING 
	 *         name=STRING 
	 *         target=STRING 
	 *         source=STRING
	 *     )
	 */
	protected void sequence_Order_Constraint(ISerializationContext context, Order_Constraint semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PkgDslPackage.Literals.ORDER_CONSTRAINT__DEFINE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PkgDslPackage.Literals.ORDER_CONSTRAINT__DEFINE));
			if (transientValues.isValueTransient(semanticObject, PkgDslPackage.Literals.ORDER_CONSTRAINT__UUID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PkgDslPackage.Literals.ORDER_CONSTRAINT__UUID));
			if (transientValues.isValueTransient(semanticObject, PkgDslPackage.Literals.ORDER_CONSTRAINT__SHORTNAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PkgDslPackage.Literals.ORDER_CONSTRAINT__SHORTNAME));
			if (transientValues.isValueTransient(semanticObject, PkgDslPackage.Literals.ORDER_CONSTRAINT__CATEGORY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PkgDslPackage.Literals.ORDER_CONSTRAINT__CATEGORY));
			if (transientValues.isValueTransient(semanticObject, PkgDslPackage.Literals.ORDER_CONSTRAINT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PkgDslPackage.Literals.ORDER_CONSTRAINT__NAME));
			if (transientValues.isValueTransient(semanticObject, PkgDslPackage.Literals.ORDER_CONSTRAINT__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PkgDslPackage.Literals.ORDER_CONSTRAINT__TARGET));
			if (transientValues.isValueTransient(semanticObject, PkgDslPackage.Literals.ORDER_CONSTRAINT__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PkgDslPackage.Literals.ORDER_CONSTRAINT__SOURCE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOrder_ConstraintAccess().getDefineIDTerminalRuleCall_0_0(), semanticObject.getDefine());
		feeder.accept(grammarAccess.getOrder_ConstraintAccess().getUuidSTRINGTerminalRuleCall_3_0(), semanticObject.getUuid());
		feeder.accept(grammarAccess.getOrder_ConstraintAccess().getShortnameSTRINGTerminalRuleCall_5_0(), semanticObject.getShortname());
		feeder.accept(grammarAccess.getOrder_ConstraintAccess().getCategorySTRINGTerminalRuleCall_7_0(), semanticObject.getCategory());
		feeder.accept(grammarAccess.getOrder_ConstraintAccess().getNameSTRINGTerminalRuleCall_9_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getOrder_ConstraintAccess().getTargetSTRINGTerminalRuleCall_11_0(), semanticObject.getTarget());
		feeder.accept(grammarAccess.getOrder_ConstraintAccess().getSourceSTRINGTerminalRuleCall_13_0(), semanticObject.getSource());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PC_TimingExpression returns PC_TimingExpression
	 *
	 * Constraint:
	 *     (define=ID name=STRING type=STRING value=STRING)
	 */
	protected void sequence_PC_TimingExpression(ISerializationContext context, PC_TimingExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PkgDslPackage.Literals.PC_TIMING_EXPRESSION__DEFINE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PkgDslPackage.Literals.PC_TIMING_EXPRESSION__DEFINE));
			if (transientValues.isValueTransient(semanticObject, PkgDslPackage.Literals.PC_TIMING_EXPRESSION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PkgDslPackage.Literals.PC_TIMING_EXPRESSION__NAME));
			if (transientValues.isValueTransient(semanticObject, PkgDslPackage.Literals.PC_TIMING_EXPRESSION__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PkgDslPackage.Literals.PC_TIMING_EXPRESSION__TYPE));
			if (transientValues.isValueTransient(semanticObject, PkgDslPackage.Literals.PC_TIMING_EXPRESSION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PkgDslPackage.Literals.PC_TIMING_EXPRESSION__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPC_TimingExpressionAccess().getDefineIDTerminalRuleCall_0_0(), semanticObject.getDefine());
		feeder.accept(grammarAccess.getPC_TimingExpressionAccess().getNameSTRINGTerminalRuleCall_3_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getPC_TimingExpressionAccess().getTypeSTRINGTerminalRuleCall_5_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getPC_TimingExpressionAccess().getValueSTRINGTerminalRuleCall_7_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Pattern_Constraint returns Pattern_Constraint
	 *
	 * Constraint:
	 *     (
	 *         define=ID 
	 *         uuid=STRING 
	 *         shortname=STRING 
	 *         category=STRING 
	 *         name=STRING 
	 *         event=STRING 
	 *         timingexpression+=Pattern_Constraint_TimingExpression*
	 *     )
	 */
	protected void sequence_Pattern_Constraint(ISerializationContext context, Pattern_Constraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Pattern_Constraint_TimingExpression returns Pattern_Constraint_TimingExpression
	 *
	 * Constraint:
	 *     (define=ID name=STRING type=STRING value=STRING)
	 */
	protected void sequence_Pattern_Constraint_TimingExpression(ISerializationContext context, Pattern_Constraint_TimingExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PkgDslPackage.Literals.PATTERN_CONSTRAINT_TIMING_EXPRESSION__DEFINE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PkgDslPackage.Literals.PATTERN_CONSTRAINT_TIMING_EXPRESSION__DEFINE));
			if (transientValues.isValueTransient(semanticObject, PkgDslPackage.Literals.PATTERN_CONSTRAINT_TIMING_EXPRESSION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PkgDslPackage.Literals.PATTERN_CONSTRAINT_TIMING_EXPRESSION__NAME));
			if (transientValues.isValueTransient(semanticObject, PkgDslPackage.Literals.PATTERN_CONSTRAINT_TIMING_EXPRESSION__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PkgDslPackage.Literals.PATTERN_CONSTRAINT_TIMING_EXPRESSION__TYPE));
			if (transientValues.isValueTransient(semanticObject, PkgDslPackage.Literals.PATTERN_CONSTRAINT_TIMING_EXPRESSION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PkgDslPackage.Literals.PATTERN_CONSTRAINT_TIMING_EXPRESSION__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPattern_Constraint_TimingExpressionAccess().getDefineIDTerminalRuleCall_0_0(), semanticObject.getDefine());
		feeder.accept(grammarAccess.getPattern_Constraint_TimingExpressionAccess().getNameSTRINGTerminalRuleCall_3_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getPattern_Constraint_TimingExpressionAccess().getTypeSTRINGTerminalRuleCall_5_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getPattern_Constraint_TimingExpressionAccess().getValueSTRINGTerminalRuleCall_7_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Periodic_Constraint returns Periodic_Constraint
	 *
	 * Constraint:
	 *     (
	 *         define=ID 
	 *         uuid=STRING 
	 *         shortname=STRING 
	 *         category=STRING 
	 *         name=STRING 
	 *         event=STRING 
	 *         timingexpression+=PC_TimingExpression*
	 *     )
	 */
	protected void sequence_Periodic_Constraint(ISerializationContext context, Periodic_Constraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Quantity returns Quantity
	 *
	 * Constraint:
	 *     (
	 *         define=ID 
	 *         uuid=STRING 
	 *         shortname=STRING 
	 *         category=STRING 
	 *         name=STRING 
	 *         substance_exp=INT? 
	 *         current_exp=INT? 
	 *         length_exp=INT? 
	 *         intensity_exp=INT? 
	 *         mass_exp=INT? 
	 *         temp_exp=INT? 
	 *         time_exp=INT?
	 *     )
	 */
	protected void sequence_Quantity(ISerializationContext context, Quantity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RC_TimingExpression returns RC_TimingExpression
	 *
	 * Constraint:
	 *     (define=ID name=STRING type=STRING value=STRING)
	 */
	protected void sequence_RC_TimingExpression(ISerializationContext context, RC_TimingExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PkgDslPackage.Literals.RC_TIMING_EXPRESSION__DEFINE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PkgDslPackage.Literals.RC_TIMING_EXPRESSION__DEFINE));
			if (transientValues.isValueTransient(semanticObject, PkgDslPackage.Literals.RC_TIMING_EXPRESSION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PkgDslPackage.Literals.RC_TIMING_EXPRESSION__NAME));
			if (transientValues.isValueTransient(semanticObject, PkgDslPackage.Literals.RC_TIMING_EXPRESSION__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PkgDslPackage.Literals.RC_TIMING_EXPRESSION__TYPE));
			if (transientValues.isValueTransient(semanticObject, PkgDslPackage.Literals.RC_TIMING_EXPRESSION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PkgDslPackage.Literals.RC_TIMING_EXPRESSION__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRC_TimingExpressionAccess().getDefineIDTerminalRuleCall_0_0(), semanticObject.getDefine());
		feeder.accept(grammarAccess.getRC_TimingExpressionAccess().getNameSTRINGTerminalRuleCall_3_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getRC_TimingExpressionAccess().getTypeSTRINGTerminalRuleCall_5_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getRC_TimingExpressionAccess().getValueSTRINGTerminalRuleCall_7_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Reaction_Constraint returns Reaction_Constraint
	 *
	 * Constraint:
	 *     (
	 *         define=ID 
	 *         uuid=STRING 
	 *         shortname=STRING 
	 *         category=STRING 
	 *         name=STRING 
	 *         scope=STRING 
	 *         timingexpression+=RC_TimingExpression*
	 *     )
	 */
	protected void sequence_Reaction_Constraint(ISerializationContext context, Reaction_Constraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Sub_Package returns Sub_Package
	 *
	 * Constraint:
	 *     (define=ID nested_package+=Nested_Package*)
	 */
	protected void sequence_Sub_Package(ISerializationContext context, Sub_Package semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Timing returns Timing
	 *
	 * Constraint:
	 *     (
	 *         define=ID 
	 *         uuid=STRING 
	 *         shortname=STRING 
	 *         category=STRING 
	 *         name=STRING 
	 *         traceable_specification=STRING? 
	 *         descriptions+=Descriptions* 
	 *         constraints+=Constraints*
	 *     )
	 */
	protected void sequence_Timing(ISerializationContext context, Timing semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Unit returns Unit
	 *
	 * Constraint:
	 *     (
	 *         define=ID 
	 *         uuid=STRING 
	 *         shortname=STRING 
	 *         category=STRING 
	 *         name=STRING 
	 *         factor=STRING? 
	 *         symbol=STRING? 
	 *         offset=STRING? 
	 *         quantity=STRING
	 *     )
	 */
	protected void sequence_Unit(ISerializationContext context, Unit semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     test1 returns test1
	 *
	 * Constraint:
	 *     (
	 *         uuid=STRING 
	 *         shortname=STRING 
	 *         category=STRING 
	 *         name=STRING 
	 *         scope=STRING 
	 *         timingexpression+=AC_TimingExpression*
	 *     )
	 */
	protected void sequence_test1(ISerializationContext context, test1 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
